name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      # Add environment variables for testing
      DISCORD_BOT_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
      WANDERER_DISCORD_BOT_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
      MIX_ENV: "test"
      CACHE_DIR: "/tmp/wanderer_notifier_cache"
      WANDERER_CACHE_DIR: "/tmp/wanderer_notifier_cache"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-test-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-test-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix deps.get
          mix deps.compile

      - name: Compile (warnings as errors)
        run: mix compile --warnings-as-errors

      - name: Run tests
        run: mix test

      - name: Generate test coverage
        run: mix test --cover
        continue-on-error: true

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs: test
    env:
      MIX_ENV: "dev"

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Restore dependencies cache
        uses: actions/cache@v3
        with:
          path: |
            deps
            _build
          key: ${{ runner.os }}-mix-lint-${{ hashFiles('**/mix.lock') }}
          restore-keys: |
            ${{ runner.os }}-mix-lint-
            ${{ runner.os }}-mix-

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix deps.get
          mix deps.compile

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run code quality checks
        run: mix credo

  docker:
    name: Validate Docker image
    runs-on: ubuntu-latest
    needs: lint
    env:
      MIX_ENV: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # required for getting commit history

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        with:
          buildkitd-flags: --debug

      - name: Generate short SHA
        id: sha
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "Using SHA: ${SHORT_SHA}"

      - name: Build Docker image (for testing)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          load: true
          tags: wanderer-notifier:pr-${{ steps.sha.outputs.short_sha }}
          build-args: |
            APP_VERSION=0.0.0-ci-test

      - name: Full Docker validation with web server
        run: |
          echo "Running comprehensive Docker validation..."
          chmod +x ./scripts/test_docker_image.sh

          # Create a temp script to explicitly test without CONFIG_PATH
          cat > test_startup.sh << 'EOF'
          #!/bin/bash
          set -x
          docker run --rm \
            -e DISCORD_BOT_TOKEN="${1:-test_token}" \
            -e WANDERER_ENV=test \
            -e WANDERER_FEATURE_DISABLE_WEBSOCKET=true \
            wanderer-notifier:pr-$2 \
            /bin/sh -c '
              # Explicitly unset CONFIG_PATH
              unset CONFIG_PATH
              # Print environment for debugging
              env | grep -E "CONFIG_PATH|NOTIFIER"
              # Start the app with eval and immediately exit
              timeout 10 /app/bin/wanderer_notifier eval "IO.puts(\"Application started successfully\"); :init.stop()"
            '
          EOF
          chmod +x test_startup.sh

          # Direct test with CONFIG_PATH unset
          echo "Direct startup test with CONFIG_PATH unset..."
          ./test_startup.sh "${{ secrets.FAKE_DISCORD_TOKEN }}" "${{ steps.sha.outputs.short_sha }}"

          # Run full validation including web server startup test
          # No --basic flag to ensure we test the running application
          ./scripts/test_docker_image.sh -i wanderer-notifier -t pr-${{ steps.sha.outputs.short_sha }} --discord-token "${{ secrets.FAKE_DISCORD_TOKEN }}"

          echo "Docker image validation successful!"
