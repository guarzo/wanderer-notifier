name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Build and test
    runs-on: ubuntu-latest
    env:
      DISCORD_BOT_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
      WANDERER_DISCORD_BOT_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
      MIX_ENV: "test"
      CACHE_DIR: "/tmp/wanderer_notifier_cache"
      WANDERER_CACHE_DIR: "/tmp/wanderer_notifier_cache"
      WANDERER_NOTIFIER_API_TOKEN: ${{ secrets.NOTIFIER_API_TOKEN }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          persist-credentials: true
          path: .

      - name: Common Elixir Setup for Test
        uses: ./.github/actions/common-elixir-setup
        with:
          elixir-version: "1.18"
          otp-version: "27"
          cache-key-prefix: mix-test
          cache-paths: |
            deps
            _build

      - name: Install dependencies
        run: |
          mix deps.get
          mix deps.compile

      - name: Compile (warnings as errors)
        run: mix compile --warnings-as-errors

      - name: Run tests
        run: mix test

      - name: Generate test coverage
        run: mix test --cover
        continue-on-error: true

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs: test
    env:
      MIX_ENV: "dev"
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Common Elixir Setup for Lint
        uses: ./.github/actions/common-elixir-setup
        with:
          elixir-version: "1.18"
          otp-version: "27"
          cache-key-prefix: mix-lint
          cache-paths: |
            deps
            _build

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix deps.get
          mix deps.compile

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run code quality checks
        run: mix credo --strict

  docker:
    name: Validate Docker image
    runs-on: ubuntu-latest
    needs: lint
    env:
      MIX_ENV: prod
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          buildkitd-flags: --debug

      - name: Generate short SHA
        id: sha
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"
          echo "Using SHA: ${SHORT_SHA}"

      - name: Build Docker image (for testing)
        uses: ./.github/actions/common-docker-build
        with:
          push: "false"
          tags: wanderer-notifier:pr-${{ steps.sha.outputs.short_sha }}
          build_args: |
            APP_VERSION=0.0.0-ci-test
            WANDERER_NOTIFIER_API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
          cache_from: ""
          cache_to: ""
          docker_username: guarzo
          docker_password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Full Docker validation with web server
        env:
          DISCORD_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
          MAP_URL_WITH_NAME: "http://example.com/map?name=testmap"
          MAP_TOKEN: "test-map-token"
          DISCORD_CHANNEL_ID: "123456789"
          LICENSE_KEY: "test-license-key"
        run: |
          echo "Running comprehensive Docker validation..."
          chmod +x ./scripts/test_docker_image.sh
          ./scripts/test_docker_image.sh -i wanderer-notifier -t pr-${{ steps.sha.outputs.short_sha }} \
            --discord-token "$DISCORD_TOKEN" \
            --env "MAP_URL_WITH_NAME=$MAP_URL_WITH_NAME" \
            --env "MAP_TOKEN=$MAP_TOKEN" \
            --env "DISCORD_CHANNEL_ID=$DISCORD_CHANNEL_ID" \
            --env "LICENSE_KEY=$LICENSE_KEY" \
            --env "WANDERER_ENV=test" \
            --env "WANDERER_FEATURE_DISABLE_WEBSOCKET=true"
          echo "Docker image validation successful!"
