name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      version_type:
        description: "Version increment type (for release)"
        required: false
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      branch:
        description: "Branch to build (for adhoc)"
        required: false
        default: "main"

jobs:
  test:
    name: Build and Test
    runs-on: ubuntu-latest
    env:
      MIX_ENV: test
      NOTIFIER_API_TOKEN: ${{ secrets.NOTIFIER_API_TOKEN }}
      DISCORD_BOT_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
      CACHE_DIR: "/tmp/wanderer_notifier_cache"
      MAP_URL: "http://example.com"
      MAP_NAME: "testmap"
      MAP_API_KEY: ${{ secrets.MAP_API_KEY }}
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
      LICENSE_MANAGER_URL: ${{ secrets.LICENSE_MANAGER_URL }}
      ENV: test
      DISABLE_WEBSOCKET: true
    steps:
      - uses: actions/checkout@v4

      - name: Common Checkout and Cache
        uses: ./.github/actions/common-checkout-cache
        with:
          branch: ${{ github.event.inputs.branch || 'main' }}
          cache-key-prefix: mix
          cache-paths: |
            deps
            _build
            priv/static

      - name: Common Elixir Setup
        uses: ./.github/actions/common-elixir-setup
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Install dependencies
        run: |
          mix deps.get
          mix deps.compile

      - name: Compile (with special handling for Mox warnings)
        run: |
          mix compile 2>&1 | (grep -v "redefining module" || true)
          [ ${PIPESTATUS[0]} -eq 0 ] || exit 1

      - name: Run tests
        run: mix test

      - name: Generate test coverage
        run: mix test --cover

  lint:
    name: Lint code
    runs-on: ubuntu-latest
    needs: test
    env:
      MIX_ENV: dev
      MAP_URL: "http://example.com"
      MAP_NAME: "testmap"
      MAP_API_KEY: ${{ secrets.MAP_API_KEY }}
      DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
      LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
      LICENSE_MANAGER_URL: ${{ secrets.LICENSE_MANAGER_URL }}
    steps:
      - uses: actions/checkout@v4

      - name: Common Checkout and Cache
        uses: ./.github/actions/common-checkout-cache
        with:
          branch: ${{ github.event.inputs.branch || 'main' }}
          cache-key-prefix: mix
          cache-paths: |
            deps
            _build
            priv/static

      - name: Common Elixir Setup
        uses: ./.github/actions/common-elixir-setup
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Install dependencies
        run: |
          mix local.hex --force
          mix deps.get
          mix deps.compile

      - name: Check formatting
        run: mix format --check-formatted

      - name: Run code quality checks (strict)
        run: mix credo --strict
        continue-on-error: true

      - name: Run code quality checks
        run: mix credo

  docker:
    name: Validate Docker image
    runs-on: ubuntu-latest
    needs: lint
    env:
      MIX_ENV: prod
    steps:
      - uses: actions/checkout@v4

      - name: Generate short SHA
        id: sha
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          echo "short_sha=$SHORT_SHA" >> $GITHUB_OUTPUT

      - name: Common Checkout and Cache
        uses: ./.github/actions/common-checkout-cache
        with:
          branch: ${{ github.event.inputs.branch || 'main' }}
          cache-key-prefix: mix
          cache-paths: |
            deps
            _build
            priv/static

      - name: Common Elixir Setup
        uses: ./.github/actions/common-elixir-setup
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Build Docker image (SHA tagged)
        uses: ./.github/actions/common-docker-build
        with:
          context: .
          push: false
          load: true
          tags: guarzo/wanderer-notifier:sha-${{ steps.sha.outputs.short_sha }}
          build-args: |
            APP_VERSION=0.0.0-ci-test
            VCS_REF=${{ github.sha }}
            API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
          cache-from: type=registry,ref=guarzo/wanderer-notifier:latest
          cache-to: type=inline

      - name: Full Docker validation with web server
        env:
          DISCORD_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
          MAP_URL: "http://example.com"
          MAP_NAME: "testmap"
          MAP_API_KEY: ${{ secrets.MAP_API_KEY }}
          DISCORD_CHANNEL_ID: ${{ secrets.DISCORD_CHANNEL_ID }}
          LICENSE_KEY: ${{ secrets.LICENSE_KEY }}
        run: |
          echo "Running comprehensive Docker validation..."
          chmod +x ./scripts/test_docker_image.sh
          ./scripts/test_docker_image.sh \
            -i guarzo/wanderer-notifier \
            -t sha-${{ steps.sha.outputs.short_sha }} \
            -d "${{ secrets.FAKE_DISCORD_TOKEN }}" \
            -e "MAP_URL=http://example.com" \
            -e "MAP_NAME=testmap" \
            -e "MAP_API_KEY=${{ secrets.MAP_API_KEY }}" \
            -e "DISCORD_CHANNEL_ID=${{ secrets.DISCORD_CHANNEL_ID }}" \
            -e "LICENSE_KEY=${{ secrets.LICENSE_KEY }}" \
            -e "LICENSE_MANAGER_URL=${{ secrets.LICENSE_MANAGER_URL }}" \
            -e "NOTIFIER_API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}" \
            -e "ENV=test" \
            -e "DISABLE_WEBSOCKET=true"
          echo "Docker image validation successful!"

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.version_type != ''
    needs: docker
    env:
      MIX_ENV: prod
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Common Elixir Setup
        uses: ./.github/actions/common-elixir-setup
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Install Mix Version plugin
        run: |
          mix local.hex --force
          mix archive.install hex mix_version --force

      - name: Bump version
        id: version
        run: |
          # Get current version before bump
          OLD_VERSION=$(cat VERSION)

          # Bump version using mix_version
          mix version --bump ${{ github.event.inputs.version_type }}

          # Get the new version
          NEW_VERSION=$(cat VERSION)

          # Set outputs
          echo "version=${NEW_VERSION}" >> $GITHUB_OUTPUT
          echo "old_version=${OLD_VERSION}" >> $GITHUB_OUTPUT
          echo "full_version=${NEW_VERSION}-$(date +'%Y%m%d%H%M%S')" >> $GITHUB_OUTPUT

          echo "Bumped version from ${OLD_VERSION} to ${NEW_VERSION}"

      - name: Update version references in docs
        if: github.event_name == 'workflow_dispatch'
        run: |
          # If there are version placeholders in docs, update them
          if [ -d "docs" ]; then
            find docs -type f -name "*.md" -exec sed -i "s/VERSION_PLACEHOLDER/${{ steps.version.outputs.version }}/g" {} \;
          fi

          find . -maxdepth 1 -name "*.md" -exec sed -i "s/VERSION_PLACEHOLDER/${{ steps.version.outputs.version }}/g" {} \;

      - name: Commit Version Changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Add VERSION file and mix.exs
          git add VERSION mix.exs

          # Add any markdown files in the root that might have been updated
          git add *.md || true

          git commit -m "chore(release): bump version to v${{ steps.version.outputs.version }}"
          git tag "v${{ steps.version.outputs.version }}"

          # Push changes and tag
          git push origin HEAD:${{ github.ref }}
          git push origin "v${{ steps.version.outputs.version }}"

      - name: Trigger Docs Workflow
        uses: benc-uk/workflow-dispatch@v1
        with:
          workflow: docs.yml
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image (SHA tagged)
        uses: ./.github/actions/common-docker-build
        id: build_release
        with:
          context: .
          push: false
          load: true
          tags: guarzo/wanderer-notifier:sha-${{ github.sha }}
          build-args: |
            APP_VERSION=${{ steps.version.outputs.full_version }}
            VCS_REF=${{ github.sha }}
            API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
          cache-from: type=registry,ref=guarzo/wanderer-notifier:latest
          cache-to: type=inline

      - name: Extract major version
        id: major_version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          MAJOR="v${VERSION%%.*}"
          echo "value=${MAJOR}" >> $GITHUB_OUTPUT

      - name: Push Docker image with release tags
        uses: ./.github/actions/common-docker-build
        with:
          context: .
          push: true
          tags: |
            guarzo/wanderer-notifier:latest
            guarzo/wanderer-notifier:${{ steps.major_version.outputs.value }}
            guarzo/wanderer-notifier:v${{ steps.version.outputs.version }}
            guarzo/wanderer-notifier:sha-${{ github.sha }}
          build-args: |
            APP_VERSION=${{ steps.version.outputs.full_version }}
            VCS_REF=${{ github.sha }}
            API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
          cache-from: type=registry,ref=guarzo/wanderer-notifier:dev
          cache-to: type=inline
          docker_username: guarzo
          docker_password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v${{ steps.version.outputs.version }}"
          name: "Release v${{ steps.version.outputs.version }}"
          body: |
            ## Wanderer Notifier v${{ steps.version.outputs.version }}
            Build: ${{ steps.version.outputs.full_version }}

            ```bash
            docker pull guarzo/wanderer-notifier:v${{ steps.version.outputs.version }}
            ```
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  adhoc:
    name: Adhoc Build
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.branch != ''
    env:
      MIX_ENV: prod
    steps:
      - uses: actions/checkout@v4

      - name: Common Versioning
        uses: ./.github/actions/common-versioning
        id: version
        with:
          mode: adhoc
          branch: ${{ github.event.inputs.branch }}

      - name: Build Docker image (SHA & adhoc tag)
        uses: ./.github/actions/common-docker-build
        with:
          context: .
          push: true
          load: true
          tags: |
            guarzo/wanderer-notifier:sha-${{ github.sha }}
            guarzo/wanderer-notifier:adhoc-${{ github.event.inputs.branch }}
          build-args: |
            APP_VERSION=${{ steps.version.outputs.full_version }}
            VCS_REF=${{ github.sha }}
            API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
          cache-from: type=registry,ref=guarzo/wanderer-notifier:latest
          cache-to: type=inline
          docker_username: guarzo
          docker_password: ${{ secrets.DOCKERHUB_PAT }}

  automatic:
    name: Automatic Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    env:
      MIX_ENV: prod
    steps:
      - uses: actions/checkout@v4

      - name: Common Versioning
        uses: ./.github/actions/common-versioning
        id: version
        with:
          mode: automatic

      - name: Build & Push Docker image (SHA & latest)
        uses: ./.github/actions/common-docker-build
        with:
          context: .
          push: true
          load: true
          tags: |
            guarzo/wanderer-notifier:sha-${{ github.sha }}
            guarzo/wanderer-notifier:dev
          build-args: |
            APP_VERSION=${{ steps.version.outputs.full_version }}
            VCS_REF=${{ github.sha }}
            API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
          cache-from: type=registry,ref=guarzo/wanderer-notifier:dev
          cache-to: type=inline
          docker_username: guarzo
          docker_password: ${{ secrets.DOCKERHUB_PAT }}
