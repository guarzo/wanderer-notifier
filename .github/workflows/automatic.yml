name: Automatic Image

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MIX_ENV: prod

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # required for pushing tags

      - name: Generate version string
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y%m%d')
          # Create version strings
          VERSION="0.0.0"  # Default version for automatic builds
          DOCKER_VERSION="${DATE}-${SHORT_SHA}"

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "docker_version=${DOCKER_VERSION}" >> "$GITHUB_OUTPUT"
          echo "Generated Docker version: ${DOCKER_VERSION}"
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "renderer/package-lock.json"

      - name: Build React application
        run: |
          # Ensure the static app directory exists first
          mkdir -p priv/static/app
          cd renderer
          npm ci
          npm run build
          cd ..
          # Copy the built React app to the static directory if needed
          # This may be redundant if the postbuild script works
          cp -r renderer/dist/* priv/static/app/ || true

      - name: Update version in mix.exs
        run: |
          # Update the version with a valid Elixir version format
          sed -i "s/version: \"[^\"]*\"/version: \"${{ steps.version.outputs.version }}\"/" mix.exs
          cat mix.exs

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: guarzo
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          build-args: |
            APP_VERSION=${{ steps.version.outputs.docker_version }}
            NOTIFIER_API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
            RELEASE_CONFIG=/app/config/release.exs
          tags: |
            guarzo/wanderer-notifier:dev
            guarzo/wanderer-notifier:${{ steps.version.outputs.docker_version }}

      - name: Test Docker image
        run: |
          echo "Testing Docker image startup..."
          # Only verify GLIBC version and basic Elixir functionality without starting the full app
          docker run --rm guarzo/wanderer-notifier:${{ steps.version.outputs.docker_version }} /bin/sh -c "echo 'GLIBC Version:' && ldd --version | head -n1 && /app/bin/wanderer_notifier eval '1+1'"
        continue-on-error: true

      - name: Create and push Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"
          git tag ${{ steps.version.outputs.docker_version }}
          git push origin ${{ steps.version.outputs.docker_version }}
