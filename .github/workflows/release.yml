name: Release

on:
  workflow_dispatch:
    inputs:
      release_version:
        description: "Release version (format: major.minor.patch)"
        required: false
        default: "1.0.0"

jobs:
  release:
    runs-on: ubuntu-latest
    env:
      MIX_ENV: prod
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # required for getting commit SHA

      - name: Generate version string
        id: version
        run: |
          SHORT_SHA=$(git rev-parse --short HEAD)
          DATE=$(date +'%Y%m%d')
          # Create a valid Elixir version string
          VERSION="${{ github.event.inputs.release_version }}"
          DOCKER_VERSION="${{ github.event.inputs.release_version }}-${DATE}-${SHORT_SHA}"
          # Extract the major version number and create a v-prefixed tag
          MAJOR_VERSION=$(echo "$VERSION" | cut -d. -f1)
          VTAG="v${MAJOR_VERSION}"

          echo "version=${VERSION}" >> "$GITHUB_OUTPUT"
          echo "docker_version=${DOCKER_VERSION}" >> "$GITHUB_OUTPUT"
          echo "vtag=${VTAG}" >> "$GITHUB_OUTPUT"
          echo "Generated Elixir version: ${VERSION}"
          echo "Generated Docker version: ${DOCKER_VERSION}"
          echo "Generated v-tag: ${VTAG}"
          echo "short_sha=${SHORT_SHA}" >> "$GITHUB_OUTPUT"

      - name: Create Git tag for release
        run: |
          VERSION="${{ github.event.inputs.release_version }}"
          git config --local user.email "actions@github.com"
          git config --local user.name "GitHub Actions"
          git tag -a "v${VERSION}" -m "Release v${VERSION}"
          git push origin "v${VERSION}"
          echo "Created and pushed tag v${VERSION}"

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: "renderer/package-lock.json"
      - name: Build React application
        run: |
          # Ensure the static app directory exists first
          mkdir -p priv/static/app
          cd renderer
          npm ci
          npm run build
          cd ..
          # Copy the built React app to the static directory if needed
          # This may be redundant if the postbuild script works
          cp -r renderer/dist/* priv/static/app/ || true

      - name: Set up Elixir
        uses: erlef/setup-beam@v1
        with:
          elixir-version: "1.18"
          otp-version: "27"

      - name: Clean dependencies
        run: |
          mix deps.clean --all
          rm -rf _build

      - name: Get dependencies and compile
        run: |
          mix deps.get --only prod
          mix deps.compile --force

      - name: Update version in mix.exs
        run: |
          # Update the version with a valid Elixir version format
          sed -i "s/version: \"[^\"]*\"/version: \"${{ steps.version.outputs.version }}\"/" mix.exs
          cat mix.exs

      - name: Compile application
        run: |
          mix release

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: guarzo
          password: ${{ secrets.DOCKERHUB_PAT }}

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            guarzo/wanderer-notifier:${{ steps.version.outputs.vtag }}
            guarzo/wanderer-notifier:${{ steps.version.outputs.docker_version }}
          build-args: |
            NOTIFIER_API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
            APP_VERSION=${{ steps.version.outputs.docker_version }}
          load: true

      # Test the Docker image to verify it can start
      - name: Test Docker image
        run: |
          echo "Testing Docker image startup..."
          # Basic check to verify the container can start
          docker run --rm guarzo/wanderer-notifier:${{ steps.version.outputs.vtag }} /bin/sh -c "echo 'Verifying container startup...' && echo 'Version: ${{ steps.version.outputs.docker_version }}' && echo 'Container started successfully'"
