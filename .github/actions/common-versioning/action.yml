name: "Common Versioning"
description: "Generate version and Docker tag information based on mode (adhoc, automatic, release)"
inputs:
  mode:
    description: "Mode: adhoc, automatic, or release"
    required: true
  branch:
    description: "Branch name (required for adhoc mode)"
    required: false
  version_type:
    description: "Version increment type (required for release mode)"
    required: false
outputs:
  short_sha:
    description: "Short SHA of the current commit"
    value: ${{ steps.versioning.outputs.short_sha }}
  version:
    description: "Version number (for release and adhoc modes)"
    value: ${{ steps.versioning.outputs.version }}
  full_version:
    description: "Full version string including build metadata"
    value: ${{ steps.versioning.outputs.full_version }}
  dev_version:
    description: "Development version string (for automatic mode)"
    value: ${{ steps.versioning.outputs.dev_version }}
  safe_branch:
    description: "Sanitized branch name (for adhoc mode)"
    value: ${{ steps.versioning.outputs.safe_branch }}
  docker_tags:
    description: "Comma-separated list of Docker tags to apply"
    value: ${{ steps.versioning.outputs.docker_tags }}
runs:
  using: "composite"
  steps:
    - name: Setup Elixir for versioning
      shell: bash
      run: |
        # Setup Mix
        mix local.hex --force
        mix local.rebar --force
        # Install mix_version if not already installed
        mix archive.install hex mix_version --force

    - name: Run versioning script
      id: versioning
      shell: bash
      run: |
        set -x  # Enable debug output
        SHORT_SHA=$(git rev-parse --short HEAD)
        echo "short_sha=${SHORT_SHA}" >> $GITHUB_OUTPUT

        # Get current version using mix_version
        CURRENT_VERSION=$(mix version)
        echo "Current version from mix_version: ${CURRENT_VERSION}"

        if [ "${{ inputs.mode }}" = "adhoc" ]; then
          if [ -z "${{ inputs.branch }}" ]; then
            echo "Branch input is required for adhoc mode"
            exit 1
          fi
          SAFE_BRANCH=$(echo "${{ inputs.branch }}" | sed 's/\//-/g')
          FULL_VERSION="${CURRENT_VERSION}-${SAFE_BRANCH}+$(date +'%Y%m%d').${SHORT_SHA}"
          DOCKER_TAG_LIST="guarzo/wanderer-notifier:branch-${SAFE_BRANCH},guarzo/wanderer-notifier:branch-${SAFE_BRANCH}-$(date +'%Y%m%d')-${SHORT_SHA}"
          {
            echo "version=${CURRENT_VERSION}"
            echo "full_version=${FULL_VERSION}"
            echo "safe_branch=${SAFE_BRANCH}"
            echo "docker_tags=${DOCKER_TAG_LIST}"
          } >> $GITHUB_OUTPUT
        elif [ "${{ inputs.mode }}" = "automatic" ]; then
          DEV_VERSION="dev-$(date +'%Y%m%d')-${SHORT_SHA}"
          DOCKER_TAGS="guarzo/wanderer-notifier:dev,guarzo/wanderer-notifier:sha-${SHORT_SHA}"
          {
            echo "dev_version=${DEV_VERSION}"
            echo "docker_tags=${DOCKER_TAGS}"
          } >> $GITHUB_OUTPUT
        elif [ "${{ inputs.mode }}" = "release" ]; then
          if [ -z "${{ inputs.version_type }}" ]; then
            echo "Version type input is required for release mode"
            exit 1
          fi
          echo "Running in release mode with version_type: ${{ inputs.version_type }}"
          
          echo "Current version: ${CURRENT_VERSION}"
          
          echo "Bumping version..."
          mix version --bump ${{ inputs.version_type }}
          NEW_VERSION=$(mix version)
          echo "New version is: ${NEW_VERSION}"
          
          # Generate the full version string
          FULL_VERSION="${NEW_VERSION}+$(date +'%Y%m%d').${SHORT_SHA}"
          echo "Full version will be: ${FULL_VERSION}"

          # Set outputs using GitHub Actions output syntax
          {
            echo "version=${NEW_VERSION}"
            echo "full_version=${FULL_VERSION}"
            echo "short_sha=${SHORT_SHA}"
          } >> $GITHUB_OUTPUT
          
          # Verify outputs were set
          echo "Debug: Verifying outputs were set correctly:"
          echo "GITHUB_OUTPUT contents:"
          cat "$GITHUB_OUTPUT"
          
          # Additional debug information
          echo "Debug: Version information:"
          echo "- Version: ${NEW_VERSION}"
          echo "- Full version: ${FULL_VERSION}"
          echo "- Short SHA: ${SHORT_SHA}"
          
          echo "Debug: mix.exs version information:"
          mix version
        else
          echo "Invalid mode: ${{ inputs.mode }}"
          exit 1
        fi
