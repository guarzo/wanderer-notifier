<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Wanderer Notifier Dashboard</title>
  <link
    rel="stylesheet"
    href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap"
  />
  <style>
    :root {
      /* Primary colors */
      --primary: #4361ee;        /* Original: #4361ee */
      --primary-light: #6A88FA;  /* Original: #6A88FA */
      --success: #4cc9f0;        /* Original: #4cc9f0 */
      --warning: #f8961e;        /* Original: #f8961e */
      --danger: #f94144;         /* Original: #f94144 */

      /* Neutral colors */
      --light: #f9fafc;
      --dark: #212529;
      --gray: #6c757d;
      --gray-light: #e9ecef;
      --gray-dark: #343a40;

      /* Sizing & Effects */
      --border-radius: 8px;
      --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.05),
                    0 1px 3px rgba(0, 0, 0, 0.1);
      --transition: all 0.2s ease-in-out;
      --spacing: 1.75rem;
    }

    * {
      box-sizing: border-box;
      margin: 0;
      padding: 0;
    }

    body {
      font-family: "Inter", -apple-system, BlinkMacSystemFont, "Segoe UI", Roboto,
        Helvetica, Arial, sans-serif;
      font-size: 17px; /* Slightly bigger for readability */
      line-height: 1.6;
      color: var(--dark);

      /* Soft background gradient */
      background: linear-gradient(
        to bottom right,
        rgba(67, 97, 238, 0.03),
        rgba(76, 201, 240, 0.03)
      );
      min-height: 100vh;
    }

    /* Header */
    .header {
      background: linear-gradient(
        135deg,
        rgba(67, 97, 238, 0.85) 0%,
        rgba(106, 136, 250, 0.85) 100%
      );
      color: white;
      padding: 2rem;
      box-shadow: var(--box-shadow);
      text-align: center;
      border-bottom-left-radius: var(--border-radius);
      border-bottom-right-radius: var(--border-radius);
    }
    .header h1 {
      margin: 0;
      font-weight: 600;
      font-size: 2rem;
    }
    .header p {
      margin: 0.5rem 0 0;
      opacity: 0.9;
      font-weight: 300;
    }

    /* Main Content Wrapper */
    .main-content {
      max-width: 1200px;
      margin: 2rem auto;
      padding: 0 var(--spacing);
    }

    /* Grid for the main dashboard layout */
    .dashboard-grid {
      display: grid;
      grid-template-columns: 1fr 1fr; /* 2 columns */
      gap: 2rem;
      margin-bottom: 2rem;
    }

    .card {
      background: white;
      border-radius: var(--border-radius);
      box-shadow: var(--box-shadow);
      padding: 1.75rem;
      transition: var(--transition);
      display: flex;
      flex-direction: column;
      justify-content: flex-start;
    }
    .card:hover {
      transform: translateY(-2px);
      box-shadow: 0 6px 12px rgba(0, 0, 0, 0.1),
                  0 3px 6px rgba(0, 0, 0, 0.08);
    }

    /* Card header */
    .card-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 1.25rem;
      padding-bottom: 0.75rem;
      border-bottom: 1px solid var(--gray-light);
    }
    .card-header h2 {
      margin: 0;
      font-weight: 600;
      font-size: 1.25rem;
      color: var(--dark);
    }

    /* Status badge next to the card header */
    .status-badge {
      display: inline-flex;
      align-items: center;
      padding: 0.35rem 0.75rem;
      border-radius: 50px;
      font-weight: 500;
      font-size: 0.875rem;
    }
    .status-valid {
      background-color: rgba(76, 201, 240, 0.15);
      color: #0077b6;
    }
    .status-invalid {
      background-color: rgba(249, 65, 68, 0.15);
      color: #d00000;
    }
    .status-warning {
      background-color: rgba(248, 150, 30, 0.15);
      color: #e85d04;
    }

    /* stat-box layout */
    .stat-box {
      margin-bottom: 1.25rem;
      line-height: 1.4;
    }
    .stat-label {
      font-weight: 600;
      color: var(--gray);
      margin-right: 0.25rem;
    }

    /* Buttons */
    .button {
      display: inline-flex;
      align-items: center;
      justify-content: center;
      padding: 0.6rem 1.2rem;
      border-radius: var(--border-radius);
      font-weight: 500;
      font-size: 0.875rem;
      cursor: pointer;
      transition: var(--transition);
      border: none;
      outline: none;
      text-decoration: none;
      margin-right: 0.5rem;
      margin-bottom: 0.5rem;
    }
    .button-primary {
      background-color: var(--primary);
      color: white;
    }
    .button-primary:hover {
      background-color: var(--primary-light);
      transform: translateY(-1px);
    }
    .button-refresh {
      background-color: var(--success);
      color: white;
      padding: 0.75rem 1.75rem;
      font-size: 1rem;
      min-width: 200px;
      margin: 3rem auto 0;
      display: block;
      font-weight: 600;
    }
    .button-refresh:hover {
      background-color: #3bb4d8;
      transform: translateY(-1px);
    }

    /* Loading indicator */
    .loading-text {
      display: flex;
      align-items: center;
      color: var(--gray);
      margin-bottom: 1rem;
    }
    .loading-indicator {
      display: inline-block;
      width: 1rem;
      height: 1rem;
      border: 2px solid rgba(67, 97, 238, 0.3);
      border-radius: 50%;
      border-top-color: var(--primary);
      animation: spin 1s linear infinite;
      margin-right: 0.5rem;
    }
    @keyframes spin {
      to {
        transform: rotate(360deg);
      }
    }

    /* Notification stats in a horizontal row */
    .stats-grid {
      display: flex;
      gap: 1rem;
      flex-wrap: wrap;
    }
    .stat-card {
      background-color: var(--light);
      border-radius: var(--border-radius);
      padding: 1rem;
      text-align: center;
      transition: var(--transition);
      flex: 0 0 100px;
    }
    .stat-card:hover {
      background-color: white;
      transform: translateY(-2px);
      box-shadow: var(--box-shadow);
    }
    .stat-value {
      font-size: 1.5rem;
      font-weight: 600;
      color: var(--primary);
      margin-bottom: 0.25rem;
    }
    .stat-label {
      font-size: 0.75rem;
      color: var(--gray);
    }

    /* Resource usage bars */
    .progress-container {
      width: 100%;
      background-color: var(--gray-light);
      border-radius: 50px;
      margin: 0.5rem 0 1rem;
      height: 8px;
      overflow: hidden;
    }
    .progress-bar {
      height: 100%;
      border-radius: 50px;
      background: linear-gradient(
        90deg,
        var(--primary-light) 0%,
        var(--success) 100%
      );
      transition: width 0.4s ease;
    }
    .progress-bar.warning {
      background: linear-gradient(90deg, var(--warning) 0%, #f9c74f 100%);
    }
    .progress-bar.danger {
      background: linear-gradient(90deg, var(--danger) 0%, #f3722c 100%);
    }

    /* For resource usage badges */
    .usage-badge {
      background-color: var(--gray-light);
      border-radius: 9999px;
      padding: 0.2rem 0.75rem;
      font-size: 0.8rem;
      font-weight: 600;
      color: var(--dark);
      margin: 0 0.25rem;
      display: inline-block;
      line-height: 1.4;
    }
    .usage-badge.limited {
      background-color: rgba(255, 56, 96, 0.15);
      color: #d00000;
    }

    /* Uptime/Reconnects badges */
    .badge-system {
      display: inline-block;
      padding: 0.25rem 0.5rem;
      border-radius: 9999px;
      background-color: var(--gray-light);
      font-size: 0.8rem;
      font-weight: 600;
      color: var(--dark);
      margin-left: 0.5rem;
    }

    /* Feature status */
    .features-wrap {
      display: flex;
      flex-wrap: wrap;
      gap: 1.5rem;
    }
    .feature-list {
      display: flex;
      flex-direction: column;
      gap: 0.5rem;
      margin-top: 0.5rem;
    }
    .feature-item {
      display: flex;
      align-items: center;
      padding: 0.5rem;
      border-radius: var(--border-radius);
      background-color: var(--light);
      transition: var(--transition);
    }
    .feature-item:hover {
      background-color: rgba(67, 97, 238, 0.05);
    }
    .feature-status {
      width: 12px;
      height: 12px;
      border-radius: 50%;
      margin-right: 0.75rem;
      flex-shrink: 0;
      position: relative;
      overflow: hidden;
    }
    /* Subtle pulse to show "active" or "inactive" */
    .feature-enabled {
      background-color: var(--success);
      animation: pulse 2s infinite;
    }
    .feature-disabled {
      background-color: var(--gray);
      animation: none;
    }
    @keyframes pulse {
      0% {
        box-shadow: 0 0 0 0 rgba(76, 201, 240, 0.4);
      }
      70% {
        box-shadow: 0 0 0 16px rgba(76, 201, 240, 0);
      }
      100% {
        box-shadow: 0 0 0 0 rgba(76, 201, 240, 0);
      }
    }

    /* Test notifications layout */
    .test-buttons {
      display: flex;
      gap: 1rem;
      margin-top: 1.5rem;
      flex-wrap: wrap;
    }

    /* Adjust layout on narrower screens: 1 column cards */
    @media (max-width: 800px) {
      .dashboard-grid {
        grid-template-columns: 1fr;
      }
    }
  </style>
</head>
<body>
  <div class="header">
    <h1>Wanderer Notifier Dashboard</h1>
    <p>Monitor your notification system and track resource usage</p>
  </div>

  <div class="main-content">
    <!-- Row 1: License + System -->
    <div class="dashboard-grid">
      <div class="card">
        <div class="card-header">
          <h2>License Status</h2>
          <span id="license-status-badge"></span>
        </div>
        <div id="license-status" class="loading-text">
          <span class="loading-indicator"></span> Loading license details...
        </div>
        <div id="license-details"></div>
        <button class="button button-primary" onclick="revalidateLicense()">Revalidate License</button>
        <div id="license-revalidation-result"></div>
      </div>

      <div class="card">
        <div class="card-header">
          <h2>System Status</h2>
        </div>
        <div id="uptime" class="loading-text">
          <span class="loading-indicator"></span> Loading...
        </div>
        <div id="websocket-status" class="loading-text">
          <span class="loading-indicator"></span> Loading...
        </div>
      </div>
    </div>

    <!-- Row 2: Notification Stats + Resource Usage -->
    <div class="dashboard-grid">
      <div class="card">
        <div class="card-header">
          <h2>Notification Statistics</h2>
        </div>
        <div id="notification-stats" class="loading-text">
          <span class="loading-indicator"></span> Loading stats...
        </div>
      </div>

      <div class="card">
        <div class="card-header">
          <h2>Resource Usage</h2>
        </div>
        <div id="resource-usage" class="loading-text">
          <span class="loading-indicator"></span> Loading usage...
        </div>
      </div>
    </div>

    <!-- Row 3: Feature Status + Test Notifications -->
    <div class="dashboard-grid">
      <div class="card">
        <div class="card-header">
          <h2>Feature Status</h2>
        </div>
        <div id="feature-status" class="loading-text">
          <span class="loading-indicator"></span> Loading features...
        </div>
      </div>

      <div class="card">
        <div class="card-header">
          <h2>Test Notifications</h2>
        </div>
        <p>Use these buttons to test different notifications:</p>
        <div class="test-buttons">
          <button class="button button-primary" onclick="sendTestNotification()">Test Kill</button>
          <button class="button button-primary" onclick="sendTestCharacterNotification()">Test Character</button>
          <button class="button button-primary" onclick="sendTestSystemNotification()">Test System</button>
        </div>
        <div id="test-notification-result"></div>
      </div>
    </div>

    <!-- Refresh -->
    <button class="button button-refresh" onclick="refreshData()">
      Refresh Dashboard
    </button>
  </div>

  <script>
    // === FETCH / REFRESH ===
    function fetchStatus() {
      fetch("/api/status")
        .then((r) => r.json())
        .then((data) => {
          updateLicenseStatus(data.license);
          updateSystemStatus(data.stats);
          updateFeatureStatus(data.features);
          updateResourceUsage(data.features.usage);
          updateNotificationStats(data.stats);
        })
        .catch((err) => console.error("Error fetching status:", err));
    }

    function refreshData() {
      document.getElementById("license-status").innerHTML =
        '<span class="loading-indicator"></span> Loading license details...';
      document.getElementById("uptime").innerHTML =
        '<span class="loading-indicator"></span> Loading...';
      document.getElementById("websocket-status").innerHTML =
        '<span class="loading-indicator"></span> Loading...';
      document.getElementById("feature-status").innerHTML =
        '<span class="loading-indicator"></span> Loading features...';
      document.getElementById("resource-usage").innerHTML =
        '<span class="loading-indicator"></span> Loading usage...';
      document.getElementById("notification-stats").innerHTML =
        '<span class="loading-indicator"></span> Loading stats...';

      fetchStatus();
    }

    // === LICENSE ===
    function revalidateLicense() {
      const resultEl = document.getElementById("license-revalidation-result");
      resultEl.innerHTML = '<div class="loading-text"><span class="loading-indicator"></span> Revalidating license...</div>';

      fetch("/api/revalidate-license")
        .then((r) => r.json())
        .then((data) => {
          if (data.success) {
            resultEl.innerHTML = makeResultBox(true, data.message, data.details);
            fetchStatus();
          } else {
            resultEl.innerHTML = makeResultBox(false, data.message, data.details);
          }
        })
        .catch((err) => {
          console.error("Error revalidating license:", err);
          resultEl.innerHTML = makeResultBox(false, "Error: " + err.message);
        });
    }

    function updateLicenseStatus(license) {
      const statusBadgeEl = document.getElementById("license-status-badge");
      const statusEl = document.getElementById("license-status");
      const detailsEl = document.getElementById("license-details");

      // Badge
      let badgeClass = "status-valid";
      let badgeText = "VALID";
      if (!license.valid) {
        badgeClass = "status-invalid";
        badgeText = "INVALID";
      } else if (license.valid && !license.bot_assigned) {
        badgeClass = "status-warning";
        badgeText = "BOT NOT ASSIGNED";
      }
      statusBadgeEl.innerHTML = `<span class="status-badge ${badgeClass}">${badgeText}</span>`;

      // Details
      let html = "";
      if (license.valid) {
        if (license.details) {
          if (license.details.license_name) {
            html += `<div class="stat-box"><span class="stat-label">Name:</span>${license.details.license_name}</div>`;
          }
          if (license.details.valid_to) {
            html += `<div class="stat-box"><span class="stat-label">Valid Until:</span>${license.details.valid_to}</div>`;
          }
          if (license.details.bots?.length) {
            const botNames = license.details.bots.map((b) => b.name).join(", ");
            html += `<div class="stat-box"><span class="stat-label">Assigned Bots:</span>${botNames}</div>`;
          }
        }
      } else {
        if (license.error_message) {
          html += `<div class="stat-box"><span class="stat-label">Error:</span>${license.error_message}</div>`;
        } else if (license.error) {
          html += `<div class="stat-box"><span class="stat-label">Error:</span>${license.error}</div>`;
        } else {
          html += `<div class="stat-box"><span class="stat-label">Error:</span>Unknown license error</div>`;
        }
      }

      // Clear any loading text
      statusEl.innerHTML = "";
      detailsEl.innerHTML = html;
    }

    // === SYSTEM ===
    function updateSystemStatus(stats) {
      const uptimeElement = document.getElementById("uptime");
      const websocketElement = document.getElementById("websocket-status");
      uptimeElement.innerHTML = `
        <div class="stat-box">
          <span class="stat-label">Uptime:</span>
          <span class="badge-system">${stats.uptime}</span>
        </div>
      `;

      const wsConnected = stats.websocket.connected;
      let wsHtml = `
        <div class="stat-box">
          <span class="stat-label">Websocket:</span>
          <span class="status-badge ${
            wsConnected ? "status-valid" : "status-invalid"
          }">${wsConnected ? "Connected" : "Disconnected"}</span>
        </div>
        <div class="stat-box">
          <span class="stat-label">Reconnects:</span>
          <span class="badge-system">${stats.websocket.reconnects}</span>
        </div>
      `;
      websocketElement.innerHTML = wsHtml;
    }

    // === NOTIFICATION STATS ===
    function updateNotificationStats(stats) {
      const container = document.getElementById("notification-stats");
      if (!stats.notifications) {
        container.innerHTML = "No notification statistics available";
        return;
      }
      const n = stats.notifications;
      let html = `<div class="stats-grid">`;
      html += makeStatCard("Total", n.total || 0);
      html += makeStatCard("Kills", n.kills || 0);
      html += makeStatCard("Systems", n.systems || 0);
      html += makeStatCard("Characters", n.characters || 0);
      html += makeStatCard("Errors", n.errors || 0);
      html += "</div>";
      container.innerHTML = html;
    }

    function makeStatCard(label, value) {
      return `
        <div class="stat-card">
          <div class="stat-value">${value}</div>
          <div class="stat-label">${label}</div>
        </div>
      `;
    }

    // === RESOURCE USAGE ===
    function updateResourceUsage(usage) {
      const container = document.getElementById("resource-usage");
      if (!usage) {
        container.innerHTML = "No usage information available";
        return;
      }
      let html = "";

      // Tracked Systems
      html += buildUsageRow(
        "Tracked Systems",
        usage.tracked_systems.current,
        usage.tracked_systems.limit,
        usage.tracked_systems.percentage
      );

      // Tracked Characters
      html += buildUsageRow(
        "Tracked Characters",
        usage.tracked_characters.current,
        usage.tracked_characters.limit,
        usage.tracked_characters.percentage
      );

      // Notification History
      if (usage.notification_history?.limit) {
        html += `
          <div class="stat-box">
            <span class="stat-label">Notification History:</span>
            <span class="badge-system">${usage.notification_history.limit} hours</span>
          </div>
        `;
      }

      container.innerHTML = html;
    }

    function buildUsageRow(label, current, limit, percentage) {
      // If limit is null, skip the slash/limit
      let usageLine = `
        <div class="stat-box">
          <span class="stat-label">${label}:</span>
          <span class="usage-badge">${current}</span>
      `;
      if (limit !== null) {
        usageLine += `
          /
          <span class="usage-badge">${limit}</span>
        `;
      }
      usageLine += `</div>`;

      let barHtml = "";
      if (percentage != null) {
        let barClass = "progress-bar";
        if (percentage > 90) barClass += " danger";
        else if (percentage > 70) barClass += " warning";
        barHtml = `
          <div class="progress-container">
            <div class="${barClass}" style="width:${percentage}%"></div>
          </div>
        `;
      }

      return usageLine + barHtml;
    }

    // === FEATURE STATUS ===
    function updateFeatureStatus(features) {
      const el = document.getElementById("feature-status");
      if (!features.enabled) {
        el.innerHTML = "No feature information available";
        return;
      }
      let html = `
        <div class="features-wrap">
          <div class="feature-list">
            ${makeFeatureItem("Basic Notifications", features.enabled.basic_notifications)}
            ${makeFeatureItem("Systems Notifications", features.enabled.tracked_systems_notifications)}
            ${makeFeatureItem("Characters Notifications", features.enabled.tracked_characters_notifications)}
            ${makeFeatureItem("Backup Kills Processing", features.enabled.backup_kills_processing)}
            ${makeFeatureItem("Web Dashboard (Full)", features.enabled.web_dashboard_full)}
            ${makeFeatureItem("Advanced Statistics", features.enabled.advanced_statistics)}
          </div>
        </div>
      `;
      el.innerHTML = html;
    }

    function makeFeatureItem(name, isEnabled) {
      return `
        <div class="feature-item">
          <div class="feature-status ${isEnabled ? "feature-enabled" : "feature-disabled"}"></div>
          <span>${name}</span>
        </div>
      `;
    }

    // === TEST NOTIFICATIONS ===
    function sendTestNotification() {
      const resultEl = document.getElementById("test-notification-result");
      resultEl.innerHTML = `<div class="loading-text"><span class="loading-indicator"></span> Sending test notification...</div>`;
      fetch("/api/test-notification")
        .then((r) => r.json())
        .then((data) => {
          resultEl.innerHTML = makeResultBox(data.success, data.message, data.details);
        })
        .catch((err) => {
          console.error("Error sending test notification:", err);
          resultEl.innerHTML = makeResultBox(false, `Error: ${err.message}`);
        });
    }
    function sendTestCharacterNotification() {
      const resultEl = document.getElementById("test-notification-result");
      resultEl.innerHTML = `<div class="loading-text"><span class="loading-indicator"></span> Sending test character notification...</div>`;
      fetch("/api/test-character-notification")
        .then((r) => r.json())
        .then((data) => {
          resultEl.innerHTML = makeResultBox(data.success, data.message, data.details);
        })
        .catch((err) => {
          console.error("Error sending test character notification:", err);
          resultEl.innerHTML = makeResultBox(false, `Error: ${err.message}`);
        });
    }
    function sendTestSystemNotification() {
      const resultEl = document.getElementById("test-notification-result");
      resultEl.innerHTML = `<div class="loading-text"><span class="loading-indicator"></span> Sending test system notification...</div>`;
      fetch("/api/test-system-notification")
        .then((r) => r.json())
        .then((data) => {
          resultEl.innerHTML = makeResultBox(data.success, data.message, data.details);
        })
        .catch((err) => {
          console.error("Error sending test system notification:", err);
          resultEl.innerHTML = makeResultBox(false, `Error: ${err.message}`);
        });
    }

    // === UTIL: Create success/error box ===
    function makeResultBox(success, message, details="") {
      if (success) {
        return `
          <div style="
            border-left:4px solid var(--success);
            background-color:rgba(76,201,240,0.15);
            color:#0077b6;
            padding:1rem;
            border-radius:var(--border-radius);
            margin-top:1rem;
          ">
            <p><strong>${message}</strong></p>
            <p>${details}</p>
          </div>
        `;
      } else {
        return `
          <div style="
            border-left:4px solid var(--danger);
            background-color:rgba(249,65,68,0.15);
            color:#d00000;
            padding:1rem;
            border-radius:var(--border-radius);
            margin-top:1rem;
          ">
            <p><strong>${message}</strong></p>
            <p>${details}</p>
          </div>
        `;
      }
    }

    document.addEventListener("DOMContentLoaded", fetchStatus);
    setInterval(fetchStatus, 30000);
  </script>
</body>
</html>
