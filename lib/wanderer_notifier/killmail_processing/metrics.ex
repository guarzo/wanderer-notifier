defmodule WandererNotifier.KillmailProcessing.Metrics do
  @moduledoc """
  Metrics collection and reporting for killmail processing.

  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics instead

  This module is deprecated and will be removed in a future release.
  All functionality has been moved to WandererNotifier.Killmail.Metrics.Metrics.
  """

  require Logger

  alias WandererNotifier.KillmailProcessing.Context
  alias WandererNotifier.Logger.Logger, as: AppLogger
  alias WandererNotifier.Killmail.Metrics.Metrics, as: NewMetrics
  alias WandererNotifier.Killmail.Core.Context, as: NewContext

  # Agent name for metrics storage
  @agent_name :killmail_metrics_agent

  # Registered metrics that are allowed to be tracked
  @registered_metrics %{
    # Base processing metrics for all modes
    "killmail.processing.realtime.start" => :counter,
    "killmail.processing.historical.start" => :counter,
    "killmail.processing.manual.start" => :counter,
    "killmail.processing.batch.start" => :counter,
    "killmail.processing.unknown.start" => :counter,

    # Complete metrics for all modes with success/error variants
    "killmail.processing.realtime.complete" => :counter,
    "killmail.processing.historical.complete" => :counter,
    "killmail.processing.manual.complete" => :counter,
    "killmail.processing.batch.complete" => :counter,
    "killmail.processing.unknown.complete" => :counter,
    "killmail.processing.realtime.complete.success" => :counter,
    "killmail.processing.historical.complete.success" => :counter,
    "killmail.processing.manual.complete.success" => :counter,
    "killmail.processing.batch.complete.success" => :counter,
    "killmail.processing.unknown.complete.success" => :counter,
    "killmail.processing.realtime.complete.error" => :counter,
    "killmail.processing.historical.complete.error" => :counter,
    "killmail.processing.manual.complete.error" => :counter,
    "killmail.processing.batch.complete.error" => :counter,
    "killmail.processing.unknown.complete.error" => :counter,

    # Skipped metrics for all modes
    "killmail.processing.realtime.skipped" => :counter,
    "killmail.processing.historical.skipped" => :counter,
    "killmail.processing.manual.skipped" => :counter,
    "killmail.processing.batch.skipped" => :counter,
    "killmail.processing.unknown.skipped" => :counter,

    # Error metrics for all modes
    "killmail.processing.realtime.error" => :counter,
    "killmail.processing.historical.error" => :counter,
    "killmail.processing.manual.error" => :counter,
    "killmail.processing.batch.error" => :counter,
    "killmail.processing.unknown.error" => :counter,

    # Persistence metrics for all modes
    "killmail.persistence.realtime" => :counter,
    "killmail.persistence.historical" => :counter,
    "killmail.persistence.manual" => :counter,
    "killmail.persistence.batch" => :counter,
    "killmail.persistence.unknown" => :counter,

    # Notification metrics for all modes
    "killmail.notification.realtime.sent" => :counter,
    "killmail.notification.historical.sent" => :counter,
    "killmail.notification.manual.sent" => :counter,
    "killmail.notification.batch.sent" => :counter,
    "killmail.notification.unknown.sent" => :counter,

    # Combined metrics generated by the MetricRegistry
    "killmail.processing.realtime.persistence" => :counter,
    "killmail.processing.historical.persistence" => :counter,
    "killmail.processing.manual.persistence" => :counter,
    "killmail.processing.batch.persistence" => :counter,
    "killmail.processing.unknown.persistence" => :counter,

    # Special compound metrics that might be generated
    "killmail.processing.realtime.complete.realtime" => :counter,
    "killmail.processing.historical.complete.historical" => :counter,
    "killmail.processing.manual.complete.manual" => :counter,
    "killmail.processing.batch.complete.batch" => :counter,
    "killmail.processing.unknown.complete.unknown" => :counter,

    # Existing combined metrics
    "killmail.processing.realtime.processing.realtime.complete" => :counter,
    "killmail.processing.historical.processing.historical.complete" => :counter,
    "killmail.processing.manual.processing.manual.complete" => :counter,
    "killmail.processing.batch.processing.batch.complete" => :counter,
    "killmail.processing.unknown.processing.unknown.complete" => :counter,
    "killmail.processing.realtime.processing.realtime.complete.success" => :counter,
    "killmail.processing.historical.processing.historical.complete.success" => :counter,
    "killmail.processing.manual.processing.manual.complete.success" => :counter,
    "killmail.processing.batch.processing.batch.complete.success" => :counter,
    "killmail.processing.unknown.processing.unknown.complete.success" => :counter,
    "killmail.processing.realtime.processing.realtime.complete.error" => :counter,
    "killmail.processing.historical.processing.historical.complete.error" => :counter,
    "killmail.processing.manual.processing.manual.complete.error" => :counter,
    "killmail.processing.batch.processing.batch.complete.error" => :counter,
    "killmail.processing.unknown.processing.unknown.complete.error" => :counter,
    "killmail.processing.realtime.notification.realtime.sent" => :counter,
    "killmail.processing.historical.notification.historical.sent" => :counter,
    "killmail.processing.manual.notification.manual.sent" => :counter,
    "killmail.processing.batch.notification.batch.sent" => :counter,
    "killmail.processing.unknown.notification.unknown.sent" => :counter
  }

  @doc """
  Required child_spec implementation for supervisor integration.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.child_spec/1 instead
  """
  def child_spec(opts) do
    Logger.warning("Using deprecated Metrics.child_spec/1, please update your code")
    NewMetrics.child_spec(opts)
  end

  @doc """
  Initializes the metrics agent.
  Call this during application startup before using any metrics functions.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.start_link/1 instead
  """
  def start_link(opts \\ []) do
    Logger.warning("Using deprecated Metrics.start_link/1, please update your code")
    NewMetrics.start_link(opts)
  end

  @doc """
  Synchronizes the registered metrics with the metric registry to avoid errors.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.synchronize_registry/0 instead
  """
  def synchronize_registry do
    Logger.warning("Using deprecated Metrics.synchronize_registry/0, please update your code")
    NewMetrics.synchronize_registry()
  end

  @doc """
  Resets all counters to zero.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.reset_counters/0 instead
  """
  def reset_counters do
    Logger.warning("Using deprecated Metrics.reset_counters/0, please update your code")
    NewMetrics.reset_counters()
  end

  @doc """
  Gets the current counter values.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.get_counters/0 instead
  """
  def get_counters do
    Logger.warning("Using deprecated Metrics.get_counters/0, please update your code")
    NewMetrics.get_counters()
  end

  @doc false
  def __registered_metrics_for_debug__ do
    Logger.warning("Using deprecated Metrics.__registered_metrics_for_debug__/0, please update your code")
    NewMetrics.__registered_metrics_for_debug__()
  end

  @doc """
  Tracks the start of killmail processing.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.track_processing_start/1 instead
  """
  @spec track_processing_start(Context.t()) :: :ok
  def track_processing_start(%Context{} = ctx) do
    Logger.warning("Using deprecated Metrics.track_processing_start/1, please update your code")

    # Convert Context to new format if needed
    new_ctx = convert_context(ctx)

    # Delegate to new implementation
    NewMetrics.track_processing_start(new_ctx)
  end

  @doc """
  Tracks the completion of killmail processing.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.track_processing_complete/2 instead
  """
  @spec track_processing_complete(Context.t(), {:ok, term()} | {:error, term()}) :: :ok
  def track_processing_complete(%Context{} = ctx, result) do
    Logger.warning("Using deprecated Metrics.track_processing_complete/2, please update your code")

    # Convert Context to new format if needed
    new_ctx = convert_context(ctx)

    # Delegate to new implementation
    NewMetrics.track_processing_complete(new_ctx, result)
  end

  @doc """
  Tracks when a killmail is skipped.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.track_processing_skipped/1 instead
  """
  @spec track_processing_skipped(Context.t()) :: :ok
  def track_processing_skipped(%Context{} = ctx) do
    Logger.warning("Using deprecated Metrics.track_processing_skipped/1, please update your code")

    # Convert Context to new format if needed
    new_ctx = convert_context(ctx)

    # Delegate to new implementation
    NewMetrics.track_processing_skipped(new_ctx)
  end

  @doc """
  Tracks when a killmail processing fails.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.track_processing_error/1 instead
  """
  @spec track_processing_error(Context.t()) :: :ok
  def track_processing_error(%Context{} = ctx) do
    Logger.warning("Using deprecated Metrics.track_processing_error/1, please update your code")

    # Convert Context to new format if needed
    new_ctx = convert_context(ctx)

    # Delegate to new implementation
    NewMetrics.track_processing_error(new_ctx)
  end

  @doc """
  Tracks when a killmail is persisted.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.track_persistence/1 instead
  """
  @spec track_persistence(Context.t()) :: :ok
  def track_persistence(%Context{} = ctx) do
    Logger.warning("Using deprecated Metrics.track_persistence/1, please update your code")

    # Convert Context to new format if needed
    new_ctx = convert_context(ctx)

    # Delegate to new implementation
    NewMetrics.track_persistence(new_ctx)
  end

  @doc """
  Tracks a notification being sent.
  @deprecated Please use WandererNotifier.Killmail.Metrics.Metrics.track_notification_sent/1 instead
  """
  @spec track_notification_sent(Context.t()) :: :ok
  def track_notification_sent(%Context{} = ctx) do
    Logger.warning("Using deprecated Metrics.track_notification_sent/1, please update your code")

    # Convert Context to new format if needed
    new_ctx = convert_context(ctx)

    # Delegate to new implementation
    NewMetrics.track_notification_sent(new_ctx)
  end

  # Helper function to convert a Context to the new format
  defp convert_context(%Context{} = old_ctx) do
    # Check if it's already the new Context format
    if Map.has_key?(old_ctx, :__struct__) and old_ctx.__struct__ == NewContext do
      old_ctx
    else
      # Extract required fields from old Context
      mode = Map.get(old_ctx, :mode)

      # Create a new Context struct
      %NewContext{
        mode: mode,
        metadata: Map.get(old_ctx, :metadata, %{})
      }
    end
  rescue
    e ->
      Logger.error("Error converting Context: #{inspect(e)}")

      # Create a basic fallback context to avoid errors
      %NewContext{mode: :unknown}
  end
end
