A. Goals
Single Source of Truth for build, test, lint, and release steps.

Reusable Workflows with workflow_call to avoid duplication.

Parameterization for adhoc vs automatic vs release modes.

Fail-Fast & Readability: clear jobs, inputs, and outputs.

B. Create a Reusable “build-and-test” Workflow
File: .github/workflows/build-and-test.yml

yaml
Copy
Edit
name: Build & Test

on:
  workflow_call:
    inputs:
      mode:
        type: choice
        required: true
        options: [adhoc, automatic, release]
      branch:
        type: string
        required: false
      version_type:
        type: choice
        required: false
        options: [patch, minor, major]
    secrets:
      DOCKERHUB_PAT:
        required: false
      NOTIFIER_API_TOKEN:
        required: true
      FAKE_DISCORD_TOKEN:
        required: true

jobs:
  checkout:
    name: Checkout & Cache
    runs-on: ubuntu-latest
    outputs:
      cache-key: ${{ steps.cache-key.outputs.value }}
    steps:
      - uses: actions/checkout@v3
        with: { fetch-depth: 0 }
      - id: cache-key
        run: echo "value=${{ runner.os }}-mix-${{ hashFiles('**/mix.lock') }}-1.18-27" >> $GITHUB_OUTPUT
      - name: Restore Cache
        uses: actions/cache@v3
        with:
          key: ${{ steps.cache-key.outputs.value }}
          path: |
            deps
            _build
            priv/static

  setup:
    name: Setup Erlang, Elixir & Node
    runs-on: ubuntu-latest
    needs: checkout
    steps:
      - uses: erlef/setup-beam@v1
        with: { elixir-version: "1.18", otp-version: "27" }
      - uses: actions/setup-node@v4
        with: { node-version: "20", cache: "npm", cache-dependency-path: "renderer/package-lock.json" }

  build:
    name: Compile & Test
    runs-on: ubuntu-latest
    needs: setup
    env:
      MIX_ENV: test
      WANDERER_NOTIFIER_API_TOKEN: ${{ secrets.NOTIFIER_API_TOKEN }}
    steps:
      - name: Mix deps.get & compile
        run: |
          mix local.hex --force
          mix local.rebar --force
          mix deps.get
          mix deps.compile
      - name: Compile (warnings as errors)
        run: mix compile --warnings-as-errors
      - name: Run tests
        run: mix test

  lint:
    name: Format & Lint
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Mix format check
        run: mix format --check-formatted
      - name: Credo strict
        run: mix credo --strict

  docker-validate:
    name: Build & Validate Docker
    runs-on: ubuntu-latest
    needs: lint
    env:
      MIX_ENV: prod
      DISCORD_BOT_TOKEN: ${{ secrets.FAKE_DISCORD_TOKEN }}
      WANDERER_NOTIFIER_API_TOKEN: ${{ secrets.NOTIFIER_API_TOKEN }}
    steps:
      - uses: docker/setup-buildx-action@v3
        with: { buildkitd-flags: "--debug" }
      - name: Build image
        uses: ./.github/actions/common-docker-build
        with:
          context: .
          push: false
          load: true
          tags: "wanderer-notifier:ci-${{ github.run_id }}"
          build-args: |
            APP_VERSION=ci-test
            WANDERER_NOTIFIER_API_TOKEN=${{ secrets.NOTIFIER_API_TOKEN }}
      - name: Run container smoke tests
        run: |
          chmod +x ./scripts/test_docker_image.sh
          ./scripts/test_docker_image.sh -i wanderer-notifier -t ci-${{ github.run_id }} \
            --discord-token "${{ secrets.FAKE_DISCORD_TOKEN }}"
C. Main “Orchestrator” Workflow
File: .github/workflows/ci.yml

yaml
Copy
Edit
name: CI Pipeline

on:
  push:
    branches: [main]
    paths-ignore: ["mix.exs"]        # skip version bumps
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      mode:
        description: "Run mode"
        required: false
        default: "automatic"
        type: choice
        options: [adhoc, automatic, release]
      branch:
        description: "Branch for adhoc"
        required: false
      version_type:
        description: "Bump type for release"
        required: false
        default: "patch"
        type: choice
        options: [patch, minor, major]

jobs:
  run:
    uses: ./.github/workflows/build-and-test.yml
    with:
      mode: ${{ github.event.inputs.mode || 'automatic' }}
      branch: ${{ github.event.inputs.branch }}
      version_type: ${{ github.event.inputs.version_type }}
    secrets: inherit
Push/PR to main triggers the full CI.

Manual dispatch (workflow_dispatch) allows adhoc or release flows.

D. Release Steps in Same Orchestrator
You can extend build-and-test.yml with conditional jobs:

yaml
Copy
Edit
  release:
    name: Bump Version & Tag
    needs: docker-validate
    if: inputs.mode == 'release'
    steps:
      - name: Bump version in files
        run: ./scripts/version.sh bump ${{ inputs.version_type }}
      - name: Commit & Tag
        run: |
          git config user.email "actions@github.com"
          git config user.name "GitHub Actions"
          git add VERSION mix.exs
          git commit -m "Release v$(cat VERSION) [skip ci]"
          git tag -a "v$(cat VERSION)" -m "Release v$(cat VERSION)"
          git push origin main --tags
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: "v$(cat VERSION)"
          name: "Release v$(cat VERSION)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
E. Remove Redundant Workflow Files
After this:

Delete .github/workflows/adhoc.yml, automatic.yml, release.yml, test.yml.

Eliminate custom composite actions that duplicate build-and-test.yml steps.

F. Milestones & Checklist

Task	Done
[ ] Create build-and-test.yml reusable workflow	
[ ] Create ci.yml to call the reusable workflow	
[ ] Add release job conditioned on mode == 'release'	
[ ] Remove old adhoc/automatic/release/test workflow files	
[ ] Verify secrets and inputs are properly passed through	
[ ] Update README-GH-PAGES.md or docs to reflect new usage	
[ ] Confirm pipeline runs successfully on push, PR, manual	
By consolidating into one reusable build-and-test workflow and a thin orchestrator, you’ll drastically cut duplication, simplify maintenance, and make it easy to extend or debug your CI/CD pipelin